type FooBar = foo:i32, bar:string
type Foo = foo:f64
type Bar = bar:char

stringify (s: string) = s

foo_and_bar a b =
    a.foo
    stringify b.bar

foobar = FooBar 1 "one"
foo = Foo 2.0
bar = Bar '3'

foo_and_bar foobar foobar
foo_and_bar foo bar

// args: --check --show-types
// expected stderr:
// examples/typechecking/member_access.an:16:17	error: Expected argument of type { bar: string, .. }, but found Bar
// foo_and_bar foo bar
// 

// expected stdout:
// Bar : (forall a. (char -> Bar can a))
// Foo : (forall a. (f64 -> Foo can a))
// FooBar : (forall a. (i32 - string -> FooBar can a))
// bar : Bar
// foo : Foo
// foo_and_bar : (forall a b c d. ({ foo: a, ..b } - { bar: string, ..c } -> string can d))
// foobar : FooBar
// stringify : (forall a. (string -> string can a))
